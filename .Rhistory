c("108學年第1學期","高級會計學","高等統計學"), #向量一
c( "108學年第2學期","食在拉丁美洲") #向量二
)
#用list則可以分成atomic vector 1&2 ，但其實裡面的內容不變
# list含兩個lists
`小明108學年課表B` <- list(
list("108-1","高級會計學","高等統計學"),
list("108-2","食在拉丁美洲")
)
print(`小明108學年課表B`)
# list含兩個lists, 子層list又各含兩個vectors
`小明108學年課表C` <- list(
list(
c("108-1"), # 可只寫 "108-1"
c("高級會計學","高等統計學")
),
list(
c("108-2"),
c("食在拉丁美洲")
)
)
print(`小明108學年課表C`)
`小明108學年課表D` <- list(
`上學期`=list(
semester=c("108-1"), # 可只寫 "108-1"
courses=c("高級會計學","高等統計學")
),
`下學期`=list(
semester=c("108-2"),
courses=c("食在拉丁美洲")
)
)
print(`小明108學年課表D`)
commit <- list(
author = list(
"Martin老師",
"mtlin@gm.ntpu.edu.tw",
ymd_hms("2020-03-25T07:17:40Z")
)
)
commit <- list(
author = list(
"Martin老師",
"mtlin@gm.ntpu.edu.tw",
ymd_hms("2020-03-25T07:17:40Z")),
commiter = list(
"emilyluckey",
"emily007@gmail.com",
ymd_hms("2020-03-26T08:18:40Z")),
message = list("update")
)
commit <- list(
author = list(
"Martin老師",
"mtlin@gm.ntpu.edu.tw",
ymd_hms("2020-03-25T07:17:40Z")),
commiter = list(
"emilyluckey",
"emily007@gmail.com",
ymd_hms("2020-03-26T08:18:40Z")),
message = list("update")
)
print(commit)
commit <- list(
author = list(
"Martin老師",
"mtlin@gm.ntpu.edu.tw",
ymd_hms("2020-03-25T07:17:40Z")),
commiter = list(
"emilyluckey",
"emily007@gmail.com",
ymd_hms("2020-03-26T08:18:40Z")),
message = "update"
)
print(commit)
commit <- list(
author = list(
name="Martin老師",
email="mtlin@gm.ntpu.edu.tw",
time=ymd_hms("2020-03-25T07:17:40Z")),
commiter = list(
name="emilyluckey",
email="emily007@gmail.com",
time=ymd_hms("2020-03-26T08:18:40Z")),
message = "update"
)
print(commit)
browseURL("https://api.github.com/repos/tpemartin/108-2-56-inclass-practice/commits")
install.packages("jsonlite")
browseURL("https://api.github.com/repos/tpemartin/108-2-56-inclass-practice/commits")
library(jsonlite) # 不少同學這行會有Error，還記得如何排除嗎？
toJSON(commit)
`小明修課紀錄`<- list(
108-1 = list(
`小明修課紀錄`<- list(
`108-1` = list(
list(
name= "個體經濟學",
teacher= "Alice",
score=85)),
list(
name="總體經濟學",
teacher="Mark",
score=73),
108-2= list(
`小明修課紀錄`<- list(
`108-1` = list(
list(
name= "個體經濟學",
teacher= "Alice",
score=85)),
list(
name="總體經濟學",
teacher="Mark",
score=73),
`108-2`= list(
name="作業研究",
teacher="Jason",
score="90")
)
print(`小明修課紀錄`)
library(lubridate)
TaipeiCity <- list(
date= list(
today= ymd("2020-03-31"),
tomorrow= ymd("2020-04-01")),
MaxT = 25,
minT = 18)
NewTaipeiCity <- list(
date= list(
today=ymd("2020-03-31"),
tomorrow=ymd("2020-04-01")),
MaxT=24,
minT=15)
library(lubridate)
TaipeiCity <- list(
date= list(
today= ymd("2020-03-31"),
tomorrow= ymd("2020-04-01")),
MaxT = 25,
minT = 18)
NewTaipeiCity <- list(
date= list(
today=ymd("2020-03-31"),
tomorrow=ymd("2020-04-01")),
MaxT=24,
minT=15)
print(TaipeiCity)
print(NewTaipeiCity)
library(lubridate)
`TaipeiCity` <- list(
date= list(
today= ymd("2020-03-31"),
tomorrow= ymd("2020-04-01")),
MaxT = 25,
minT = 18)
`NewTaipeiCity` <- list(
date= list(
today=ymd("2020-03-31"),
tomorrow=ymd("2020-04-01")),
MaxT=24,
minT=15)
print(`TaipeiCity`)
print(`NewTaipeiCity`)
commit <- list(
author = list(
name="Martin老師",
email="mtlin@gm.ntpu.edu.tw",
time=ymd_hms("2020-03-25T07:17:40Z")),
commiter = list(
name="emilyluckey",
email="emily007@gmail.com",
time=ymd_hms("2020-03-26T08:18:40Z")),
message = "update"
)
print(commit)
library(lubridate)
TaipeiCity <- list(
date= list(
today= ymd("2020-03-31"),
tomorrow= ymd("2020-04-01")),
MaxT = 25,
minT = 18)
NewTaipeiCity <- list(
date= list(
today=ymd("2020-03-31"),
tomorrow=ymd("2020-04-01")),
MaxT=24,
minT=15)
print(TaipeiCity)
print(NewTaipeiCity)
View(NewTaipeiCity)
knitr::opts_chunk$set(echo = TRUE)
str(listExample$course_info)
knitr::opts_chunk$set(echo = TRUE)
vectorExample <- c("小明","小英","大雄")
# 有多少位置可選：
length(vectorExample)
vectorExample[[1]]
vectorExample[[3]]
#從旁邊的放大鏡看可以發現其實實際上只有兩個可以選:student 跟學期
listExample <-
list(
student="小明",
course_info=list(
`108-1`=list(
list(
name="個體經濟學",
teacher="Alice",
grade=85
)
),
`108-2`=list(
list(
name="總體經濟學",
teacher="Mark",
grade=78
)
)
)
)
# 有多少位置可選：
length(listExample)
listExample[[1]]
listExample[[2]]
library(jsonlite)
fromJSON("https://data.tainan.gov.tw/dataset/4cd9345a-04bf-4328-a97d-314ff78b4763/resource/afc025fc-1ef4-447c-b785-a680391d0ca1/download/tnsport2.json", simplifyDataFrame = F) -> tainanSportsMap
length(tainanSportsMap)
tainanSportsMap[[1]]
tainanSportsMap[[1076]]
# 有多少名字可選：
names(listExample)
listExample$student
listExample$course_info
str(listExample) #用來看資料的結構
str(listExample$course_info)
listExample[["student"]]
listExample$student
listExample[["學期"]] # 小心不是反頓點喔。
listExample$`學期`
listExample[["student"]]
listExample$student
listExample[["course_info"]] # 小心不是反頓點喔。
listExample$course_info
fromJSON("http://data.ntpc.gov.tw/api/v1/rest/datastore/382000000A-000157-002",
simplifyDataFrame = F) -> newTaipeiCityVaccine
student <- "student"
student <- "student"
listExample[[student]]
str(newTaipeiCityVaccine)
length(newTaipeiCityVaccine)
length(newTaipeiCityVaccine)
newTaipeiCityVaccin[[1]]
length(newTaipeiCityVaccine)
newTaipeiCityVaccine[[1]]
length(newTaipeiCityVaccine)
newTaipeiCityVaccine[[1]]
length(newTaipeiCityVaccine)
names(newTaipeiCityVaccine)
str(newTaipeiCityVaccine[[1]])
str(newTaipeiCityVaccine$success)
length(newTaipeiCityVaccine)
names(newTaipeiCityVaccine)
str(newTaipeiCityVaccine[[1]])
str(newTaipeiCityVaccine$success)
str(newTaipeiCityVaccine[["success"]])
str(newTaipeiCityVaccine[[2]])
length(newTaipeiCityVaccine)
names(newTaipeiCityVaccine)
str(newTaipeiCityVaccine[[1]])
str(newTaipeiCityVaccine$success)
str(newTaipeiCityVaccine[["success"]])
str(newTaipeiCityVaccine[[2]])
str(newTaipeiCityVaccine$result)
names(newTaipeiCityVaccine)
str(newTaipeiCityVaccine$result)
length(newTaipeiCityVaccine)
names(newTaipeiCityVaccine)
str(newTaipeiCityVaccine[[1]])
str(newTaipeiCityVaccine$success)
str(newTaipeiCityVaccine[["success"]])
str(newTaipeiCityVaccine[[2]], max.level = 1)
str(newTaipeiCityVaccine$result)
str(newTaipeiCityVaccine[[2]], max.level = 1)
str(newTaipeiCityVaccine$result, max.level = 1)
str(newTaipeiCityVaccine[["result"]], max.level = 1)
vectorExample
vectorExample[c(1,3)]
vectorExample[c(3,2,1)] # 產生重新排列效果
# 顯示到第一層
str(listExample, max.level=1)
listExample[c(1,2)]
listExample[c(1,2)]
# 顯示到第一層
str(listExample, max.level=1)
# 顯示到第一層
str(listExample, max.level=1)
str(listExample[c(1,2)])
# 顯示到第一層
str(listExample, max.level=1)
str(listExample[c(1,2)],max.level = 1)
# 顯示到第一層
str(listExample, max.level=1)
str(listExample[c(1,2)],max.level = 1)
str(listExample[c(2,1)],max.level = 1)
str(tainanSportsMap)
str(tainanSportsMap,max.level = 1)
str(tainanSportsMap[c(1,382,1076)],max.level = 1)
# 顯示到第一層
str(listExample, max.level=1)
listExample[c("學期")]
listExample[c("student","學期")]
# 顯示到第一層
str(listExample, max.level=1)
listExample[c("course_info")]
listExample[c("student","course_info")]
# 顯示到第一層
str(listExample, max.level=1)
# 顯示到第一層
str(listExample, max.level=1)
listExample[c("course_info")]
listExample[c("student","course_info")]
listExample[c("course_info","student")]
fromJSON("https://www.dropbox.com/s/qnm9bnz7vccrvcz/taipeiNightMarkets.json?dl=1", simplifyDataFrame = F) -> taipeiNightMarkets
View(taipeiNightMarkets)
str(taipeiNightMarkets,max.level = 1)
str(taipeiNightMarkets,max.level = 1)
taipeiNightMarkets[c("寧夏觀光夜市","華西街觀光夜市")]
vectorExample
vectorExample[c(T,T,F)] # 要，要，不要
str(listExample[c(F,T)]) # 不要，要
str(listExample[c(T,T)]) # 要，要
str(listExample[c(F,T)]) # 不要，要
length(taipeiNightMarkets)
taipeiNightMarkets[c(T,F,F,F,T,F,F,F,F,T,F,F,T)]
length(taipeiNightMarkets)
taipeiNightMarkets[c(T,F,F,F,T,F,F,F,F,T,F,F,T),max.level=1]
taipeiNightMarkets[c(T,F,F,F,T,F,F,F,F,T,F,F,T)]
names(taipeiNightMarkets)
taipeiNightMarkets[c(T,F,F,F,T,F,F,F,F,T,F,F,T)]
str(taipeiNightMarkets[c(T,F,F,F,T,F,F,F,F,T,F,F,T)],max.level = 1)
selectedMarkets<- rep(F,14)
names(taipeiNightMarkets)
c(T,F,F,F,T,F,F,F,F,T,F,F,T) ->selectedMarkets
str(taipeiNightMarkets[c(T,F,F,F,T,F,F,F,F,T,F,F,T)],max.level = 1)
print(selectedMarkets)
selectedMarkets[c(1,5,10,14)] <- TRUE
selectedMarkets
selectedMarkets<- rep(F,14) #repeat F by 14 times
print(selectedMarkets)
str(taipeiNightMarkets[selectedMarkets],max.level = 1)
names(taipeiNightMarkets)
c(T,F,F,F,T,F,F,F,F,T,F,F,T) ->selectedMarkets
str(taipeiNightMarkets[c(T,F,F,F,T,F,F,F,F,T,F,F,T)],max.level = 1)
str(taipeiNightMarkets[selectedMarkets],max.level = 1)
str(listExample,max.level = 3)
get1 <- listExample[["學期"]]
get2 <- listExample["學期"]
get1 #學期拿出來，有三個元素的list
str(listExample,max.level = 3)
str(get1)
get1 <- listExample[["學期"]]
get2 <- listExample["學期"]
get1 #學期拿出來，有三個元素的list
str(listExample,max.level = 3)
str(get1)
#get1 #學期拿出來，有三個元素的list
str(listExample,max.level = 3)
str(get1)
get1 <- listExample["course_info"]
str(get1)
get1 <- listExample[["course_info"]]
get2 <- listExample["course_info"]
#get1 #學期拿出來，有三個元素的list
str(listExample,max.level = 3)
get2 # listExample 只留下 學期元素，是個只有一個元素的list
str(get2)
get2 <- listExample["course_info"]  # listExample 只留下 學期元素，是個只有一個元素的list
str(get2,max.level = 1)
str(get2,max.level = 2)
str(listExample,max.level = 3)
str(get1,max.level = 1)
str(get2,max.level = 2)
numVector <- c(2,3,6,-1,4,2,6)
select1 <- numVector[c(1,4)]; select1
select2 <- select1[[1]]; select2
# 相當於
numVector[c(1,4)][[1]]
select1 <- numVector[c(T,T,F,T,F,F,T)]; select1
select2 <- select1[c(1,4)]; select2
# 相當於
numVector[c(T,T,F,T,F,F,T)][c(1,4)]
majors <- c("經濟學系","經濟學系","社會學系","社工系","經濟學系")
names <- c("小英", "小美", "大雄","阿華", "阿尼")
gender <- c("F","F","M","F","M")
econOnly <- majors[c(1,2,5)]
names[econOnly]
econOnly
econOnly <- majors[c(T,T,F,F,T)]
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite)
fromJSON("https://www.dropbox.com/s/3of3hxzt86oyci8/Gamemaster.json?dl=1", simplifyDataFrame = F) -> Gamemaster
knitr::opts_chunk$set(echo = TRUE)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
print(example[c("name","bloodType")])
pick_bloodB <- example$bloodType == "B"
example$name[pick_bloodB]
pick_evens <- (sequenceNums %% 2) == 0
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
pick_evens <- (sequenceNums %% 2) == 0
sequenceNums[pick_evens]
x <- c(1,5,8)
y <- c(5,8)
# x裡的元素值是不是屬於y集合
x %in% y
print(example[c("name","residence")])
print(example[c("name","residence")])
set_TaipeiMetro <- c("Taipei","NewTaipei")
pick_fromTaipeiMetro <- example$residence %in% set_TaipeiMetro
example$name[pick_fromTaipeiMetro]
print(example[c("name","residence")])
set_TaipeiMetro <- c("Taipei","New Taipei")
pick_fromTaipeiMetro <- example$residence %in% set_TaipeiMetro
example$name[pick_fromTaipeiMetro]
knitr::opts_chunk$set(echo = TRUE)
str(transcript100to103)
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
str(transcript100to103)
str(transcript100to103)
set_lawBusiness <- c("法學院","商學院")
pick_lawBusiness <- transcript100to103$`學院` %in% set_lawBusiness
transcript100to103$`學院`[pick_lawBusiness]
factor(transcript100to103)
factor(transcript100to103$`學院`)
levels(factor(transcript100to103$`學院`))
#還有另一個好用的函數
unique(transcript100to103)
#還有另一個好用的函數
unique(transcript100to103$`學院`)
pick_not_fromTaipeiMetro <- ! pick_fromTaipeiMetro
# 或
pick_not_fromTaipeiMetro <- !(example$residence %in% set_TaipeiMetro)
# () 裡面會先運算完才做外面!的處理
print(example[c("name","residence")])
example$name[pick_fromTaipeiMetro]
example$name[pick_not_fromTaipeiMetro]
x2 <- c(1,NA,10)
y2 <- c(-1,NA,20)
x3 <- c(NA,"小花")
y3 <- c(NA,"小華")
x2
is.na(x2)
c(22,NA,18) -> a
a==NA
is.na(a)
print(example[c("name","weight")])
print(example[c("name","weight")])
pick_na <- is.na(example$weight)
example$name[pick_na]
0/0
list_victimAges_female$數目 <- as.integer(list_victimAges_female$數目)
jsonlite::fromJSON("https://www.dropbox.com/s/3uijub7xheib405/list_victimAges_female.json?dl=1", simplifyDataFrame = F) -> list_victimAges_female
list_victimAges_female$`數目` <- as.integer(list_victimAges_female$`數目`)
pick_na <- is.na(list_victimAges_female$`數目`)
list_victimAges_female$`數目`[pick_na]
sum(list_victimAges_female$`數目`[pick_na])
total_na <- pick_na
print(total_na)
print(example[c("name","hobby")])
pick_loveFood <- stringr::str_detect(example$hobby,"美食")
example$name[pick_loveFood]
print(example[c("name","hobby")])
pick_loveFood <- str_detect(example$hobby,"美食")
print(example[c("name","hobby")])
pick_loveFood <- stringr::str_detect(example$hobby,"美食")
example$name[pick_loveFood]
example[["hobby2"]] <- c("美食", "時尚", "美食", "旅遊")
print(example[c("name", "hobby2")])
pick_loveFood2 <- example$hobby2 == "美食"
example$name[pick_loveFood2]
library(stringr)
pick_loveFood <- str_detect(example$hobby,"美食")
example$name[pick_loveFood]
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8?$format=json") ->
garbageRoutes
#  1 用typeof()函數查詢電腦實質上如何看待garbageRoutes。
typeof(garbageRoutes)
#  2 用class()函數查詢電腦把它能進行的操作運算歸屬於哪一類型。
class(garbageRoutes)
# 由linename元素判斷垃圾車有幾條路線。
factor(garbageRoutes$linename) -> garbageRoutes$linename
levels(garbageRoutes$linename)
# 由linename創造： 可篩選出下午路線的「要/不要」向量pick_afternoonRoutes。
pick_afternoonRoutes <-
str_detect(
garbageRoutes$linename,
"下午"
)
garbageRoutes$linename[pick_afternoonRoutes]
?str_detect
CDC_chatbox <- readr::read_csv("http://od.cdc.gov.tw/pr/CDC_chatbox.csv")
pick <- str_detect(CDC_chatbox$Question,"肺炎")
CDC_chatbox$Question[pick]
