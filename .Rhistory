learning_topics$functionsCreated$demand(1.2)
typeof(demand_return)
# 查詢函數執行所要求環境
environment(demand_return)
# 若函數執行需要Global environment已存在某些物件，查詢需要哪些物件
codetools::findGlobals(demand_return)
intercept <- 10
slope <- -5
myDemand <- function(p){
q_d <- intercept + slope*p
return(q_d)
}
environment(demand_return)
environment(myDemand)
codetools::findGlobals(demand_return)
codetools::findGlobals(myDemand)
# myDemand對Global environment的要求多了intercept及slope
# 移除global environment裡的intercept及slope
rm(intercept, slope)
demand_return(1.2) # 維持正常運作
intercept <- 10
slope <- -5
myDemand(1.2)
slope <- -1
myDemand(1.2)
intercept <- 5
slope <- -1.2
myDemand(1.2)
myDemand2 <- function(p, intercept=10, slope=-5){
q_d <- intercept + slope*p
return(q_d)
}
environment(myDemand2)
findGlobals(myDemand2) # 不依靠global env裡的intercept/slope
codetools::findGlobals(myDemand2) # 不依靠global env裡的intercept/slope
myDemand2(1.2)
myDemand2(1.2, slope=-1)
myDemand2(1.2, intercept=5, slope=-1.2)
knitr::opts_chunk$set(echo = TRUE)
library(stringr)
# 先執行此行輸入學號
readline(prompt = "請輸入你的學號") -> studentId
knitr::opts_chunk$set(echo = TRUE)
library(stringr)
if(!require(lubridate)){ # condition: 是否「沒安裝lubridate」？
install.packages("lubridate")
}
lubridate::ymd_hms("2020-07-01 13:00:00 GMT")
convert_TaiwanDate2WesternDate <- function(twDate){
library(stringr)
regex_pattern <-
"(?<=民國)[0-9]+(?=年)"
# 取出民國年，計算西元年
year <-
str_extract(
twDate,
regex_pattern)
westernYear <- as.integer(year)+1911
# 替換民國xx年的xx成西元年數字
str_replace(
twDate,
regex_pattern,  # 要換掉的文字
as.character(westernYear) # 要替換的內容
) -> twDate_reformat
lubridate::ymd(twDate_reformat) -> westernDate
return(westernDate)
}
twDate <-  c("民國108年12月5日","民國98年10月5日")
convert_TaiwanDate2WesternDate(twDate)
convert_TaiwanDate2WesternDate(twDate) -> WesternDate
class(WesternDate)
convert_TaiwanDate2WesternDate <- function(twDate){
if(!require("stringr")){
install.packages("stringr")
}
if(!require("lubridate")){
install.packages("lubridate")
}
library(stringr)
regex_pattern <-
"(?<=民國)[0-9]+(?=年)"
# 取出民國年，計算西元年
year <-
str_extract(
twDate,
regex_pattern)
westernYear <- as.integer(year)+1911
# 替換民國xx年的xx成西元年數字
str_replace(
twDate,
regex_pattern,  # 要換掉的文字
as.character(westernYear) # 要替換的內容
) -> twDate_reformat
lubridate::ymd(twDate_reformat) -> westernDate
return(westernDate)
}
# 測試
check_package("clipr")
install.packages("clipr")
# 測試
check_package("clipr")
install.packages("SOAR")
# 檢視步驟耗時elapse time
system.time(
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
)
if(!exists("weather_next36hours")){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
SOAR::Store(weather_next36hours) # 存在.R_cache environment中
}
askSilly_weather2 <- function(locationInput,dateInput){
if(!exists("weather_next36hours")){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
SOAR::Store(weather_next36hours) # 存在.R_cache environment中
}
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}
system.time(
askSilly_weather("新北市",today())
)
library(lubridate)
library(lubridate)
system.time(
askSilly_weather("新北市",today())
)
View(askSilly_weather2)
# n 為偶數
n <- 54
fvalue <- n/2
# n 為奇數
n <- 33
fvalue <- -(n+1)/2
(n %% 2)==1 # 表示「奇數」; 或...
as.logical(n %% 2) # 只有0會變F，其他數值都是T
n <- 54
if(as.logical(n %% 2)){
fvalue <- -(n+1)/2
} else {
fvalue <- n/2
}
myFun <- function(n){
if(as.logical(n %% 2)){
fvalue <- -(n+1)/2
} else {
fvalue <- n/2
}
return(fvalue)
}
myFun(54)
myFun(33)
knitr::opts_chunk$set(echo = TRUE)
jsonlite::fromJSON("https://www.dropbox.com/s/d14j5hp3i5ps657/examSubmissionTimes.json?dl=1") -> examSubmissionTime
head(examSubmissionTime$section)
head(examSubmissionTime$time)
i<-1
student_i_section <- examSubmissionTime$section[[i]]
student_i_time <- examSubmissionTime$time[[i]]
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei") #
howEarly <- deadline - lubridate::ymd_hms(
student_i_time, tz="Asia/Taipei")
print(howEarly)
student_i_section <- examSubmissionTime$section[[i]]
student_i_time <- examSubmissionTime$time[[i]]
else{deadline <- lubridate::ymd_hms("2020-05-27 17:00:00",tz="Asia/Taipei")}
if(student_i_section=="56"){deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei")}else{deadline <- lubridate::ymd_hms("2020-05-27 17:00:00",tz="Asia/Taipei")}
howearly <- deadline - lubridate::ymd_hms(student_i_time,tz="Asia/Taipei")
print(howearly)
i<-1
student_i_section <- examSubmissionTime$section[[i]]
student_i_time <- examSubmissionTime$time[[i]]
if(student_i_section=="56"){
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei")
} else {
deadline <- lubridate::ymd_hms("2020-05-27 17:00:00", tz="Asia/Taipei")
}
howEarly <- deadline - lubridate::ymd_hms(student_i_time, tz="Asia/Taipei")
print(howEarly)
compute_howEarly <- function(student_i_section, student_i_time){
# student_i_section <- examSubmissionTime$section[[i]]
# student_i_time <- examSubmissionTime$time[[i]]
if(student_i_section=="56"){
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei")
} else {
deadline <- lubridate::ymd_hms("2020-05-27 17:00:00", tz="Asia/Taipei")
}
howEarly <- deadline - lubridate::ymd_hms(student_i_time, tz="Asia/Taipei")
# print(howEarly)
return(howEarly)
}
compute_howEarly <- function(student_i_section, student_i_time){
# student_i_section <- examSubmissionTime$section[[i]]
# student_i_time <- examSubmissionTime$time[[i]]
if(student_i_section=="56"){
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei")
} else {
deadline <- lubridate::ymd_hms("2020-05-27 17:00:00", tz="Asia/Taipei")
}
howEarly <- deadline - lubridate::ymd_hms(student_i_time, tz="Asia/Taipei")
# print(howEarly)
return(howEarly)
}
studentSequence <- 1:length(examSubmissionTime$section)
map(studentSequence,
~compute_howEarly(
examSubmissionTime$section[[.x]],
examSubmissionTime$time[[.x]])
) -> list_howEarly
studentSequence <- 1:length(examSubmissionTime$section)
magritr::map(studentSequence,
~compute_howEarly(
examSubmissionTime$section[[.x]],
examSubmissionTime$time[[.x]])
) -> list_howEarly
studentSequence <- 1:length(examSubmissionTime$section)
magrittr::map(studentSequence,
~compute_howEarly(
examSubmissionTime$section[[.x]],
examSubmissionTime$time[[.x]])
) -> list_howEarly
studentSequence <- 1:length(examSubmissionTime$section)
purrr::map(studentSequence,
~compute_howEarly(
examSubmissionTime$section[[.x]],
examSubmissionTime$time[[.x]])
) -> list_howEarly
library(magrittr)
list_howEarly %>%
unlist() -> examSubmissionTime$howEarly
pick_56 <- examSubmissionTime$section=="56"
mean(examSubmissionTime$howEarly[pick_56])
median(examSubmissionTime$howEarly[pick_56])
pick_78 <- examSubmissionTime$section=="78"
mean(examSubmissionTime$howEarly[pick_78])
median(examSubmissionTime$howEarly[pick_78])
readline("請輸入你的成績（整數）： ") -> grade # 單獨執行
if(grade >=90){
print("優")
} else if(grade>=80 & grade<=89){
print("良")
} else if(grade>=70 & grade<=79){
print("尚可")
} else {
print("待加強")
}
knitr::opts_chunk$set(echo = TRUE)
n <- 54
if(as.logical(n %% 2)){
fvalue <- -(n+1)/2}
else{fvalue <- n/2
n <- 54
if(as.logical(n %% 2)){
fvalue <- -(n+1)/2
}else{fvalue <- n/2
}return(fvalue)
n <- 54
if(as.logical(n %% 2)){
fvalue <- -(n+1)/2
} else{fvalue <- n/2
}return(fvalue)
n <- 54
if(as.logical(n %% 2)){
fvalue <- -(n+1)/2
} else{fvalue <- n/2
}return(fvalue)
n <- 54
if(as.logical(n %% 2)){
fvalue <- -(n+1)/2
} else {
fvalue <- n/2
}
n <- 54
if(as.logical(n %% 2)){
fvalue <- -(n+1)/2
} else {
fvalue <- n/2
}
n <- 54
if(as.logical(n %% 2)){
fvalue <- -(n+1)/2
} else {
fvalue <- n/2
}
return(fvalue)
n <- 54
if(as.logical(n %% 2)){
fvalue <- -(n+1)/2
} else {
fvalue <- n/2
} return(fvalue)
myFun <- function(n){
if(as.logical(n %% 2)){
fvalue <- -(n+1)/2
} else {
fvalue <- n/2
}
return(fvalue)
}
myFun(54)
jsonlite::fromJSON("https://www.dropbox.com/s/d14j5hp3i5ps657/examSubmissionTimes.json?dl=1") -> examSubmissionTime
head(examSubmissionTime$section)
head(examSubmissionTime$time)
knitr::opts_chunk$set(echo = F, eval=F)
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate)
surface_A <- (20*10+10*15+20*15)*2
surface_cube <- function(L,W,H){(L*W+W*H+L*H)*2}
surface_cube <- function(L,W,H){
A <- (L*W+W*H+L*H)*2
} return(A)
surface_cube <- function(L,W,H){
A <- (L*W+W*H+L*H)*2
}
return(A)
return(A)
surface_cube <- function(L,W,H){
A <- (L*W+W*H+L*H)*2
return(A)
}
surface_cube(20,10,15)
knitr::opts_chunk$set(echo = TRUE)
sampleData <- list(
list("男", 45), list("女", 32), list("男",50), list("男",33), list("女", 21)
)
# 前三筆性別
sampleData[[1]][[1]]
sampleData[[2]][[1]]
sampleData[[3]][[1]]
sampleData[[1]][[1]]
sampleData[[2]][[1]]
sampleData[[3]][[1]]
library(purrr)
# 串接寫法(I): external dispatch
library(magrittr)
sampleData[[1]] %>% {.[[1]]}
sampleData[[2]] %>% {.[[1]]}
sampleData[[3]] %>% {.[[1]]}
map(sampleData, ~{.x[[1]]})
# 串接寫法(II): internal dispatch
1 %>% {sampleData[[.]][[1]]}
2 %>% {sampleData[[.]][[1]]}
3 %>% {sampleData[[.]][[1]]}
map(1:5, ~{sampleData[[.x]][[1]]})
# map在單維度遞迴時，.x也可以只寫.
map(1:5, ~{sampleData[[.]][[1]]})
library(magrittr)
library(purrr)
eggs <- rep("雞蛋x1", 8)
library(stringr)
fryEgg <- function(egg){
str_replace(egg, "雞蛋", "荷包蛋")
}
# external dispatch
eggs[[1]] %>% fryEgg(.)
eggs[[2]] %>% fryEgg(.)
eggs[[3]] %>% fryEgg(.)
map(eggs, ~fryEgg(.x)) -> friedEggs1
print(friedEggs1)
# internal dispatch
1 %>% {fryEgg(eggs[[.]])}
2 %>% {fryEgg(eggs[[.]])}
3 %>% {fryEgg(eggs[[.]])}
map(1:8, ~{fryEgg(eggs[[.]])}) -> friedEggs2
print(friedEggs2)
grade <- c(45, 74, NA)
i<-3
grade_i <- grade[[i]]
if(!is.na(grade_i)){
if(grade_i >= 60){
"P"
} else{
"F"
}
} else {
"缺考"
}
pass_or_fail <- function(grade_i){
if(!is.na(grade_i)){
if(grade_i >= 60){
"P"
} else {
"F"
}
} else {
"缺考"
}
}
pass_or_fail(grade[[1]])
pass_or_fail(grade[[2]])
pass_or_fail(grade[[3]])
# 可否直接input整個grade vector
warning("不是vectorised function")
pass_or_fail(grade)
grade <- c(45, 74, NA)
i<-3
grade_i <- grade[[i]]
if(!is.na(grade_i)){
if(grade_i >= 60){
"P"
} else{
"F"
}
} else {
"缺考"
}
pass_or_fail <- function(grade_i){
if(!is.na(grade_i)){
if(grade_i >= 60){
"P"
} else {
"F"
}
} else {
"缺考"
}
}
pass_or_fail(grade[[1]])
pass_or_fail(grade[[2]])
pass_or_fail(grade[[3]])
# 可否直接input整個grade vector
warning("不是vectorised function")
pass_or_fail(grade)
grade[[1]] %>% {pass_or_fail(.)}
grade[[2]] %>% {pass_or_fail(.)}
grade[[3]] %>% {pass_or_fail(.)}
map(grade, ~{pass_or_fail(.)}) # map to list
map_chr(grade, ~{pass_or_fail(.)}) # map to atom. vectof of class character
map_pass_fail <- function(grade){
map_chr(grade, ~{pass_or_fail(.)})
}
map_pass_fail(grade)
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
View(courseStructure)
entranceYear <- 100
major <- "經濟系"
allGrades <- paste0(major,1:4)
academicYears <- entranceYear+0:3
entranceYear <- 100
major <- "經濟系"
allGrades <- paste0(major,1:4)
academicYears <- entranceYear+0:3
#100學年 1年級
acadYear_i <- academicYears[[1]]
grade_i <- allGrades[[1]]
pick <-
(courseStructure$`學年` == acadYear_i
&
str_detect(courseStructure$`應修系級`, grade_i))
unique(courseStructure$`科目名稱`[pick])
#101學年 2年級
acadYear_i <- academicYears[[2]]
pick <-
(courseStructure$`學年` == acadYear_i
&
str_detect(courseStructure$`科目名稱`,grade_i))
grade_i <- allGrades[[2]]
pick <-
(courseStructure$`學年` == acadYear_i
&
str_detect(courseStructure$`科目名稱`,grade_i))
#101學年 2年級
acadYear_i <- academicYears[[2]]
grade_i <- allGrades[[2]]
pick <-
(courseStructure$`學年` == acadYear_i
&
str_detect(courseStructure$`應修系級`,grade_i))
unique(courseStructure$`科目名稱`[pick])
#102學年 3年級
acadYear_i <- academicYears[[3]]
grade_i <- allGrades[[3]]
pick <-
(courseStructure$`學年` == acadYear_i
&
str_detect(courseStructure$`應修系級`,grade_i))
entranceYear <- 100
major <- "經濟系"
allGrades <- paste0(major,1:4)
academicYears <- entranceYear+0:3
#100學年 1年級
acadYear_i <- academicYears[[1]]
grade_i <- allGrades[[1]]
pick <-
(courseStructure$`學年` == acadYear_i
&
str_detect(courseStructure$`應修系級`, grade_i))
unique(courseStructure$`科目名稱`[pick])
#101學年 2年級
acadYear_i <- academicYears[[2]]
grade_i <- allGrades[[2]]
pick <-
(courseStructure$`學年` == acadYear_i
&
str_detect(courseStructure$`應修系級`,grade_i))
unique(courseStructure$`科目名稱`[pick])
#102學年 3年級
acadYear_i <- academicYears[[3]]
grade_i <- allGrades[[3]]
pick <-
(courseStructure$`學年` == acadYear_i
&
str_detect(courseStructure$`應修系級`,grade_i))
unique(courseStructure$`科目名稱`[pick])
