teacher="Mark",
grade=78
)
)
)
)
# 有多少位置可選：
length(listExample)
listExample[[1]]
listExample[[2]]
library(jsonlite)
fromJSON("https://data.tainan.gov.tw/dataset/4cd9345a-04bf-4328-a97d-314ff78b4763/resource/afc025fc-1ef4-447c-b785-a680391d0ca1/download/tnsport2.json", simplifyDataFrame = F) -> tainanSportsMap
length(tainanSportsMap)
tainanSportsMap[[1]]
tainanSportsMap[[1076]]
# 有多少名字可選：
names(listExample)
listExample$student
listExample$course_info
str(listExample) #用來看資料的結構
str(listExample$course_info)
listExample[["student"]]
listExample$student
listExample[["學期"]] # 小心不是反頓點喔。
listExample$`學期`
listExample[["student"]]
listExample$student
listExample[["course_info"]] # 小心不是反頓點喔。
listExample$course_info
fromJSON("http://data.ntpc.gov.tw/api/v1/rest/datastore/382000000A-000157-002",
simplifyDataFrame = F) -> newTaipeiCityVaccine
student <- "student"
student <- "student"
listExample[[student]]
str(newTaipeiCityVaccine)
length(newTaipeiCityVaccine)
length(newTaipeiCityVaccine)
newTaipeiCityVaccin[[1]]
length(newTaipeiCityVaccine)
newTaipeiCityVaccine[[1]]
length(newTaipeiCityVaccine)
newTaipeiCityVaccine[[1]]
length(newTaipeiCityVaccine)
names(newTaipeiCityVaccine)
str(newTaipeiCityVaccine[[1]])
str(newTaipeiCityVaccine$success)
length(newTaipeiCityVaccine)
names(newTaipeiCityVaccine)
str(newTaipeiCityVaccine[[1]])
str(newTaipeiCityVaccine$success)
str(newTaipeiCityVaccine[["success"]])
str(newTaipeiCityVaccine[[2]])
length(newTaipeiCityVaccine)
names(newTaipeiCityVaccine)
str(newTaipeiCityVaccine[[1]])
str(newTaipeiCityVaccine$success)
str(newTaipeiCityVaccine[["success"]])
str(newTaipeiCityVaccine[[2]])
str(newTaipeiCityVaccine$result)
names(newTaipeiCityVaccine)
str(newTaipeiCityVaccine$result)
length(newTaipeiCityVaccine)
names(newTaipeiCityVaccine)
str(newTaipeiCityVaccine[[1]])
str(newTaipeiCityVaccine$success)
str(newTaipeiCityVaccine[["success"]])
str(newTaipeiCityVaccine[[2]], max.level = 1)
str(newTaipeiCityVaccine$result)
str(newTaipeiCityVaccine[[2]], max.level = 1)
str(newTaipeiCityVaccine$result, max.level = 1)
str(newTaipeiCityVaccine[["result"]], max.level = 1)
vectorExample
vectorExample[c(1,3)]
vectorExample[c(3,2,1)] # 產生重新排列效果
# 顯示到第一層
str(listExample, max.level=1)
listExample[c(1,2)]
listExample[c(1,2)]
# 顯示到第一層
str(listExample, max.level=1)
# 顯示到第一層
str(listExample, max.level=1)
str(listExample[c(1,2)])
# 顯示到第一層
str(listExample, max.level=1)
str(listExample[c(1,2)],max.level = 1)
# 顯示到第一層
str(listExample, max.level=1)
str(listExample[c(1,2)],max.level = 1)
str(listExample[c(2,1)],max.level = 1)
str(tainanSportsMap)
str(tainanSportsMap,max.level = 1)
str(tainanSportsMap[c(1,382,1076)],max.level = 1)
# 顯示到第一層
str(listExample, max.level=1)
listExample[c("學期")]
listExample[c("student","學期")]
# 顯示到第一層
str(listExample, max.level=1)
listExample[c("course_info")]
listExample[c("student","course_info")]
# 顯示到第一層
str(listExample, max.level=1)
# 顯示到第一層
str(listExample, max.level=1)
listExample[c("course_info")]
listExample[c("student","course_info")]
listExample[c("course_info","student")]
fromJSON("https://www.dropbox.com/s/qnm9bnz7vccrvcz/taipeiNightMarkets.json?dl=1", simplifyDataFrame = F) -> taipeiNightMarkets
View(taipeiNightMarkets)
str(taipeiNightMarkets,max.level = 1)
str(taipeiNightMarkets,max.level = 1)
taipeiNightMarkets[c("寧夏觀光夜市","華西街觀光夜市")]
vectorExample
vectorExample[c(T,T,F)] # 要，要，不要
str(listExample[c(F,T)]) # 不要，要
str(listExample[c(T,T)]) # 要，要
str(listExample[c(F,T)]) # 不要，要
length(taipeiNightMarkets)
taipeiNightMarkets[c(T,F,F,F,T,F,F,F,F,T,F,F,T)]
length(taipeiNightMarkets)
taipeiNightMarkets[c(T,F,F,F,T,F,F,F,F,T,F,F,T),max.level=1]
taipeiNightMarkets[c(T,F,F,F,T,F,F,F,F,T,F,F,T)]
names(taipeiNightMarkets)
taipeiNightMarkets[c(T,F,F,F,T,F,F,F,F,T,F,F,T)]
str(taipeiNightMarkets[c(T,F,F,F,T,F,F,F,F,T,F,F,T)],max.level = 1)
selectedMarkets<- rep(F,14)
names(taipeiNightMarkets)
c(T,F,F,F,T,F,F,F,F,T,F,F,T) ->selectedMarkets
str(taipeiNightMarkets[c(T,F,F,F,T,F,F,F,F,T,F,F,T)],max.level = 1)
print(selectedMarkets)
selectedMarkets[c(1,5,10,14)] <- TRUE
selectedMarkets
selectedMarkets<- rep(F,14) #repeat F by 14 times
print(selectedMarkets)
str(taipeiNightMarkets[selectedMarkets],max.level = 1)
names(taipeiNightMarkets)
c(T,F,F,F,T,F,F,F,F,T,F,F,T) ->selectedMarkets
str(taipeiNightMarkets[c(T,F,F,F,T,F,F,F,F,T,F,F,T)],max.level = 1)
str(taipeiNightMarkets[selectedMarkets],max.level = 1)
str(listExample,max.level = 3)
get1 <- listExample[["學期"]]
get2 <- listExample["學期"]
get1 #學期拿出來，有三個元素的list
str(listExample,max.level = 3)
str(get1)
get1 <- listExample[["學期"]]
get2 <- listExample["學期"]
get1 #學期拿出來，有三個元素的list
str(listExample,max.level = 3)
str(get1)
#get1 #學期拿出來，有三個元素的list
str(listExample,max.level = 3)
str(get1)
get1 <- listExample["course_info"]
str(get1)
get1 <- listExample[["course_info"]]
get2 <- listExample["course_info"]
#get1 #學期拿出來，有三個元素的list
str(listExample,max.level = 3)
get2 # listExample 只留下 學期元素，是個只有一個元素的list
str(get2)
get2 <- listExample["course_info"]  # listExample 只留下 學期元素，是個只有一個元素的list
str(get2,max.level = 1)
str(get2,max.level = 2)
str(listExample,max.level = 3)
str(get1,max.level = 1)
str(get2,max.level = 2)
numVector <- c(2,3,6,-1,4,2,6)
select1 <- numVector[c(1,4)]; select1
select2 <- select1[[1]]; select2
# 相當於
numVector[c(1,4)][[1]]
select1 <- numVector[c(T,T,F,T,F,F,T)]; select1
select2 <- select1[c(1,4)]; select2
# 相當於
numVector[c(T,T,F,T,F,F,T)][c(1,4)]
majors <- c("經濟學系","經濟學系","社會學系","社工系","經濟學系")
names <- c("小英", "小美", "大雄","阿華", "阿尼")
gender <- c("F","F","M","F","M")
econOnly <- majors[c(1,2,5)]
names[econOnly]
econOnly
econOnly <- majors[c(T,T,F,F,T)]
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite)
fromJSON("https://www.dropbox.com/s/3of3hxzt86oyci8/Gamemaster.json?dl=1", simplifyDataFrame = F) -> Gamemaster
knitr::opts_chunk$set(echo = TRUE)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
print(example[c("name","bloodType")])
pick_bloodB <- example$bloodType == "B"
example$name[pick_bloodB]
pick_evens <- (sequenceNums %% 2) == 0
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
pick_evens <- (sequenceNums %% 2) == 0
sequenceNums[pick_evens]
x <- c(1,5,8)
y <- c(5,8)
# x裡的元素值是不是屬於y集合
x %in% y
print(example[c("name","residence")])
print(example[c("name","residence")])
set_TaipeiMetro <- c("Taipei","NewTaipei")
pick_fromTaipeiMetro <- example$residence %in% set_TaipeiMetro
example$name[pick_fromTaipeiMetro]
print(example[c("name","residence")])
set_TaipeiMetro <- c("Taipei","New Taipei")
pick_fromTaipeiMetro <- example$residence %in% set_TaipeiMetro
example$name[pick_fromTaipeiMetro]
knitr::opts_chunk$set(echo = TRUE)
str(transcript100to103)
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
str(transcript100to103)
str(transcript100to103)
set_lawBusiness <- c("法學院","商學院")
pick_lawBusiness <- transcript100to103$`學院` %in% set_lawBusiness
transcript100to103$`學院`[pick_lawBusiness]
factor(transcript100to103)
factor(transcript100to103$`學院`)
levels(factor(transcript100to103$`學院`))
#還有另一個好用的函數
unique(transcript100to103)
#還有另一個好用的函數
unique(transcript100to103$`學院`)
pick_not_fromTaipeiMetro <- ! pick_fromTaipeiMetro
# 或
pick_not_fromTaipeiMetro <- !(example$residence %in% set_TaipeiMetro)
# () 裡面會先運算完才做外面!的處理
print(example[c("name","residence")])
example$name[pick_fromTaipeiMetro]
example$name[pick_not_fromTaipeiMetro]
x2 <- c(1,NA,10)
y2 <- c(-1,NA,20)
x3 <- c(NA,"小花")
y3 <- c(NA,"小華")
x2
is.na(x2)
c(22,NA,18) -> a
a==NA
is.na(a)
print(example[c("name","weight")])
print(example[c("name","weight")])
pick_na <- is.na(example$weight)
example$name[pick_na]
0/0
list_victimAges_female$數目 <- as.integer(list_victimAges_female$數目)
jsonlite::fromJSON("https://www.dropbox.com/s/3uijub7xheib405/list_victimAges_female.json?dl=1", simplifyDataFrame = F) -> list_victimAges_female
list_victimAges_female$`數目` <- as.integer(list_victimAges_female$`數目`)
pick_na <- is.na(list_victimAges_female$`數目`)
list_victimAges_female$`數目`[pick_na]
sum(list_victimAges_female$`數目`[pick_na])
total_na <- pick_na
print(total_na)
print(example[c("name","hobby")])
pick_loveFood <- stringr::str_detect(example$hobby,"美食")
example$name[pick_loveFood]
print(example[c("name","hobby")])
pick_loveFood <- str_detect(example$hobby,"美食")
print(example[c("name","hobby")])
pick_loveFood <- stringr::str_detect(example$hobby,"美食")
example$name[pick_loveFood]
example[["hobby2"]] <- c("美食", "時尚", "美食", "旅遊")
print(example[c("name", "hobby2")])
pick_loveFood2 <- example$hobby2 == "美食"
example$name[pick_loveFood2]
library(stringr)
pick_loveFood <- str_detect(example$hobby,"美食")
example$name[pick_loveFood]
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8?$format=json") ->
garbageRoutes
#  1 用typeof()函數查詢電腦實質上如何看待garbageRoutes。
typeof(garbageRoutes)
#  2 用class()函數查詢電腦把它能進行的操作運算歸屬於哪一類型。
class(garbageRoutes)
# 由linename元素判斷垃圾車有幾條路線。
factor(garbageRoutes$linename) -> garbageRoutes$linename
levels(garbageRoutes$linename)
# 由linename創造： 可篩選出下午路線的「要/不要」向量pick_afternoonRoutes。
pick_afternoonRoutes <-
str_detect(
garbageRoutes$linename,
"下午"
)
garbageRoutes$linename[pick_afternoonRoutes]
?str_detect
CDC_chatbox <- readr::read_csv("http://od.cdc.gov.tw/pr/CDC_chatbox.csv")
pick <- str_detect(CDC_chatbox$Question,"肺炎")
CDC_chatbox$Question[pick]
knitr::opts_chunk$set(echo = TRUE)
dataList <- list(
num=c(2,97,22,15,7),
chr=c("2","97","22","15","7")
)
#但在上一章節我們學到map函數
library(purrr)
map(dataList, ~is.numeric(.x)) ->results
map(dataList, is.numeric) -> results #map如果是套用某個特定函數的時候可以直接寫函數名稱，省略~跟.x
unlist(results) -> pick_numeric
dataList[pick_numeric] -> num_element
(num_element[[1]] > 50) -> pick_big
num_element[[1]][pick_big] -> bigNumber
map(dataList,is.numeric) %>%
unlist(.) %>%
datalist[.] -> num_element
map(dataList, is.numeric) %>%
unlist(.) %>%
datalist[.] -> num_element
dataList <- list(
num=c(2,97,22,15,7),
chr=c("2","97","22","15","7")
)
map(dataList, is.numeric) %>%
unlist(.) %>%
datalist[.] -> num_element
library(magrittr)
library(magrittr)
map(dataList, is.numeric) %>%
unlist(.) %>%
datalist[.] -> num_element
library(magrittr)
map(dataList, is.numeric) %>%
unlist(.) %>%
dataList[.] %>%
{(.[[1]] > 50)} %>%
num_element[[1]][.] -> bigNumber
knitr::opts_chunk$set(echo = TRUE)
askSilly_weather <- function(locationInput,dateInput){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}
askSilly_weather("臺中市",today())
askSilly_weather <- function(locationInput,dateInput){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}
knitr::opts_chunk$set(echo = TRUE)
# p=1.2的需求量
p=1.2
qd <- 10-5*p  #小心是5*p, 不能寫5p,寫5p會像是物件名稱
# p=1.3的需求量
p=1.3
qd <- 10-5*p
# p=1.4的需求量
p=1.4
qd <- 10-5*p
demand <-  #創造一個物件叫demand,因為在r裡面任何東西都是一個物件
function(p){q_d <- 10-5*p}  #定義這個物件為函數,小心是5*p, 不能寫5p
# p=1.2的需求量
demand(1.2)
# p=1.3的需求量
demand(1.3)
# p=1.4的需求量
demand(1.4)
#可是會發現執行上面三行code旁邊的environment沒有發生任何改變
#這是因為我們在創造demand的時候等於打造了一個機器人，但我們在輸入demand(1.2)時，等於只有要求機器人算卻沒有要他把結果告訴我們
demand_return <-
function(p){
q_d <- 10-5*p
return(q_d)
}
# 印在螢幕，但Global Environment並不會有q_d
demand_return(1.2)
# 要長久存在Global Environment要指定物件名稱（不要求與q_d同名）
demand_return(1.2) -> q_d1.2
demand_return(1.2) # 相當於
4 #只會顯示在螢幕上
demand_return(1.2) -> q_d1.2 # 相當於
4 -> q_d1.2
q_d <- 5
demand_return(p=1.2)
print(q_d)
#請寫下供給函數 qs=0+2p
supply <-
function(p){q_s <- 0+2*p
return(q_s)}
library(lubridate)
dateInput <- today()
locationInput <- "新北市"
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
# 找出符合地點的天氣資訊：weatherAtLocation
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location # 可挑出locationInput的「要/不要」向量
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
# 在weatherAtLocation找出符合時間的天氣資訊
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
askSilly_weather <- function(locationInput,dateInput){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}
library(lubridate)
library(lubridate)
askSilly_weather("臺中市",today())
askSilly_weather("花蓮縣",today())
#打造一個國際時間轉換機器人叫what_time_it_is
location <- "Europe/Paris"
what_time_it_is <- function(location){times <- with_tz(now(),tz="Europe/Paris")
return(times)}
what_time_it_is(location)
#打造一個國際時間轉換機器人叫what_time_it_is
location <- "Europe/Paris"
what_time_it_is <- function(location){times <- with_tz(now(),tz="Europe/Paris")
return(times)}
what_time_it_is(location)
#打造一個國際時間轉換機器人叫what_time_it_is
what_time_it_is <- function(Europe/paris){times <- with_tz(now(),tz="Europe/Paris")
location <- Europe/Paris
#打造一個國際時間轉換機器人叫what_time_it_is
location <- Europe/Paris
#打造一個國際時間轉換機器人叫what_time_it_is
location <- "Europe/Paris"
what_time_it_is <- function(location){times <- with_tz(now(),tz="Europe/Paris")
return(times)}
what_time_it_is(Europe/paris)
class(demand_return)
# 查詢函數formals arguments要求
formals(askSilly_weather)
formals(demand_return)
# 查詢函數主體
body(askSilly_weather)
body(demand_return)
learning_topics <-
list(
subject="函數",
date=lubridate::ymd("2020-06-03"),
functionsCreated=list(
demand=demand_return # 等號右邊是呼叫demand_return的定義值，也就是function(...){...}值定義本身。
)
)
learning_topics$functionsCreated$demand(1.2)
typeof(demand_return)
# 查詢函數執行所要求環境
environment(demand_return)
# 若函數執行需要Global environment已存在某些物件，查詢需要哪些物件
codetools::findGlobals(demand_return)
intercept <- 10
slope <- -5
myDemand <- function(p){
q_d <- intercept + slope*p
return(q_d)
}
environment(demand_return)
environment(myDemand)
codetools::findGlobals(demand_return)
codetools::findGlobals(myDemand)
# myDemand對Global environment的要求多了intercept及slope
# 移除global environment裡的intercept及slope
rm(intercept, slope)
demand_return(1.2) # 維持正常運作
intercept <- 10
slope <- -5
myDemand(1.2)
slope <- -1
myDemand(1.2)
intercept <- 5
slope <- -1.2
myDemand(1.2)
myDemand2 <- function(p, intercept=10, slope=-5){
q_d <- intercept + slope*p
return(q_d)
}
environment(myDemand2)
findGlobals(myDemand2) # 不依靠global env裡的intercept/slope
codetools::findGlobals(myDemand2) # 不依靠global env裡的intercept/slope
myDemand2(1.2)
myDemand2(1.2, slope=-1)
myDemand2(1.2, intercept=5, slope=-1.2)
knitr::opts_chunk$set(echo = TRUE)
library(stringr)
# 先執行此行輸入學號
readline(prompt = "請輸入你的學號") -> studentId
